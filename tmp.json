{
    "cells":  [
                  {
                      "cell_type":  "code",
                      "execution_count":  1,
                      "id":  "imports_logs",
                      "metadata":  {

                                   },
                      "outputs":  [
                                      {
                                          "name":  "stderr",
                                          "output_type":  "stream",
                                          "text":  [
                                                       "C:\\Users\\SebastiánIgnacioCata\\AppData\\Local\\Temp\\ipykernel_1852\\283767319.py:8: DtypeWarning: Columns (4) have mixed types. Specify dtype option on import or set low_memory=False.\n",
                                                       "  df = pd.read_csv(\u0027output_price.csv\u0027)\n",
                                                       "c:\\Users\\SebastiánIgnacioCata\\AppData\\Local\\Python\\pythoncore-3.14-64\\Lib\\site-packages\\pandas\\core\\arraylike.py:399: RuntimeWarning: divide by zero encountered in log\n",
                                                       "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
                                                       "c:\\Users\\SebastiánIgnacioCata\\AppData\\Local\\Python\\pythoncore-3.14-64\\Lib\\site-packages\\pandas\\core\\arraylike.py:399: RuntimeWarning: invalid value encountered in log\n",
                                                       "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
                                                       "c:\\Users\\SebastiánIgnacioCata\\AppData\\Local\\Python\\pythoncore-3.14-64\\Lib\\site-packages\\pandas\\core\\arraylike.py:399: RuntimeWarning: divide by zero encountered in log\n",
                                                       "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
                                                       "c:\\Users\\SebastiánIgnacioCata\\AppData\\Local\\Python\\pythoncore-3.14-64\\Lib\\site-packages\\pandas\\core\\arraylike.py:399: RuntimeWarning: invalid value encountered in log\n",
                                                       "  result = getattr(ufunc, method)(*inputs, **kwargs)\n"
                                                   ]
                                      },
                                      {
                                          "data":  {
                                                       "text/html":  [
                                                                         "\u003cdiv\u003e\n",
                                                                         "\u003cstyle scoped\u003e\n",
                                                                         "    .dataframe tbody tr th:only-of-type {\n",
                                                                         "        vertical-align: middle;\n",
                                                                         "    }\n",
                                                                         "\n",
                                                                         "    .dataframe tbody tr th {\n",
                                                                         "        vertical-align: top;\n",
                                                                         "    }\n",
                                                                         "\n",
                                                                         "    .dataframe thead th {\n",
                                                                         "        text-align: right;\n",
                                                                         "    }\n",
                                                                         "\u003c/style\u003e\n",
                                                                         "\u003ctable border=\"1\" class=\"dataframe\"\u003e\n",
                                                                         "  \u003cthead\u003e\n",
                                                                         "    \u003ctr style=\"text-align: right;\"\u003e\n",
                                                                         "      \u003cth\u003e\u003c/th\u003e\n",
                                                                         "      \u003cth\u003esemana\u003c/th\u003e\n",
                                                                         "      \u003cth\u003ezona_ventas\u003c/th\u003e\n",
                                                                         "      \u003cth\u003ecategoria\u003c/th\u003e\n",
                                                                         "      \u003cth\u003efamilia\u003c/th\u003e\n",
                                                                         "      \u003cth\u003esku\u003c/th\u003e\n",
                                                                         "      \u003cth\u003enombre_producto\u003c/th\u003e\n",
                                                                         "      \u003cth\u003eprecio_promedio\u003c/th\u003e\n",
                                                                         "      \u003cth\u003ecosto_por_kilo\u003c/th\u003e\n",
                                                                         "      \u003cth\u003ekilos\u003c/th\u003e\n",
                                                                         "      \u003cth\u003eventa\u003c/th\u003e\n",
                                                                         "      \u003cth\u003ecosto\u003c/th\u003e\n",
                                                                         "      \u003cth\u003eln_precio_promedio\u003c/th\u003e\n",
                                                                         "      \u003cth\u003eln_kilos\u003c/th\u003e\n",
                                                                         "    \u003c/tr\u003e\n",
                                                                         "  \u003c/thead\u003e\n",
                                                                         "  \u003ctbody\u003e\n",
                                                                         "    \u003ctr\u003e\n",
                                                                         "      \u003cth\u003e0\u003c/th\u003e\n",
                                                                         "      \u003ctd\u003e2024-10-28\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003eA La Carta\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003eCONSERVAS\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003eVERDURAS\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e101520140\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003ePALMITOS ESMERALDA 810 g\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e4074.0\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e3241.0\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e1\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e3300\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e2625\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e8.312381\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e0.000000\u003c/td\u003e\n",
                                                                         "    \u003c/tr\u003e\n",
                                                                         "    \u003ctr\u003e\n",
                                                                         "      \u003cth\u003e1\u003c/th\u003e\n",
                                                                         "      \u003ctd\u003e2024-10-28\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003eA La Carta\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003eOTROS ABARROTES\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003eTORTILLAS DE TRIGO\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e104529120\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003eTORTILLAS ZANAFOODS 28 cm 12 uds.\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e2978.0\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e2540.0\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e1\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e2799\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e2388\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e7.999007\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e0.000000\u003c/td\u003e\n",
                                                                         "    \u003c/tr\u003e\n",
                                                                         "    \u003ctr\u003e\n",
                                                                         "      \u003cth\u003e2\u003c/th\u003e\n",
                                                                         "      \u003ctd\u003e2024-10-28\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003eA La Carta\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003ePESCADOS Y MARISCOS\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003eMARISCOS Y MOLUSCOS\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e104518890\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003eSURTIDO MARISCOS SILVER  1kg IMPORTADO\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e2490.0\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e1806.0\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e2\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e4980\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e3611\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e7.820038\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e0.693147\u003c/td\u003e\n",
                                                                         "    \u003c/tr\u003e\n",
                                                                         "    \u003ctr\u003e\n",
                                                                         "      \u003cth\u003e3\u003c/th\u003e\n",
                                                                         "      \u003ctd\u003e2024-10-28\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003eA La Carta\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003ePOLLO\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003eTRUTROS\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e104519180\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003eTRUTRO ENTERO INTERFOLIADO BRASIL 15 kg\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e2290.0\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e1617.0\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e15\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e34349\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e24257\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e7.736307\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e2.708050\u003c/td\u003e\n",
                                                                         "    \u003c/tr\u003e\n",
                                                                         "    \u003ctr\u003e\n",
                                                                         "      \u003cth\u003e4\u003c/th\u003e\n",
                                                                         "      \u003ctd\u003e2024-10-28\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003eA La Carta\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003eSALSAS Y ADEREZOS\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003eKETCHUP\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e201200012\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003eKETCHUP DON JUAN 900 g RRP\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e2133.0\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e1229.0\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e1\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e1920\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e1106\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e7.665285\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e0.000000\u003c/td\u003e\n",
                                                                         "    \u003c/tr\u003e\n",
                                                                         "  \u003c/tbody\u003e\n",
                                                                         "\u003c/table\u003e\n",
                                                                         "\u003c/div\u003e"
                                                                     ],
                                                       "text/plain":  [
                                                                          "       semana zona_ventas            categoria              familia  \\\n",
                                                                          "0  2024-10-28  A La Carta            CONSERVAS             VERDURAS   \n",
                                                                          "1  2024-10-28  A La Carta      OTROS ABARROTES   TORTILLAS DE TRIGO   \n",
                                                                          "2  2024-10-28  A La Carta  PESCADOS Y MARISCOS  MARISCOS Y MOLUSCOS   \n",
                                                                          "3  2024-10-28  A La Carta                POLLO              TRUTROS   \n",
                                                                          "4  2024-10-28  A La Carta    SALSAS Y ADEREZOS              KETCHUP   \n",
                                                                          "\n",
                                                                          "         sku                          nombre_producto  precio_promedio  \\\n",
                                                                          "0  101520140                 PALMITOS ESMERALDA 810 g           4074.0   \n",
                                                                          "1  104529120        TORTILLAS ZANAFOODS 28 cm 12 uds.           2978.0   \n",
                                                                          "2  104518890   SURTIDO MARISCOS SILVER  1kg IMPORTADO           2490.0   \n",
                                                                          "3  104519180  TRUTRO ENTERO INTERFOLIADO BRASIL 15 kg           2290.0   \n",
                                                                          "4  201200012               KETCHUP DON JUAN 900 g RRP           2133.0   \n",
                                                                          "\n",
                                                                          "   costo_por_kilo  kilos  venta  costo  ln_precio_promedio  ln_kilos  \n",
                                                                          "0          3241.0      1   3300   2625            8.312381  0.000000  \n",
                                                                          "1          2540.0      1   2799   2388            7.999007  0.000000  \n",
                                                                          "2          1806.0      2   4980   3611            7.820038  0.693147  \n",
                                                                          "3          1617.0     15  34349  24257            7.736307  2.708050  \n",
                                                                          "4          1229.0      1   1920   1106            7.665285  0.000000  "
                                                                      ]
                                                   },
                                          "execution_count":  1,
                                          "metadata":  {

                                                       },
                                          "output_type":  "execute_result"
                                      }
                                  ],
                      "source":  [
                                     "import pandas as pd\n",
                                     "import numpy as np\n",
                                     "\n",
                                     "# Carga df si no existe y crea logs requeridos\n",
                                     "try:\n",
                                     "    df\n",
                                     "except NameError:\n",
                                     "    df = pd.read_csv(\u0027output_price.csv\u0027)\n",
                                     "\n",
                                     "for col, new in [(\u0027precio_promedio\u0027,\u0027ln_precio_promedio\u0027), (\u0027kilos\u0027,\u0027ln_kilos\u0027)]:\n",
                                     "    if col not in df.columns:\n",
                                     "        raise KeyError(f\"Falta la columna \u0027{col}\u0027 en el DataFrame\")\n",
                                     "    s = pd.to_numeric(df[col], errors=\u0027coerce\u0027)\n",
                                     "    df[new] = np.where(s \u003e 0, np.log(s), np.nan)\n",
                                     "\n",
                                     "df.head()\n"
                                 ]
                  },
                  {
                      "cell_type":  "code",
                      "execution_count":  2,
                      "id":  "ols_por_sku",
                      "metadata":  {

                                   },
                      "outputs":  [
                                      {
                                          "name":  "stderr",
                                          "output_type":  "stream",
                                          "text":  [
                                                       "c:\\Users\\SebastiánIgnacioCata\\AppData\\Local\\Python\\pythoncore-3.14-64\\Lib\\site-packages\\numpy\\lib\\_function_base_impl.py:3065: RuntimeWarning: invalid value encountered in divide\n",
                                                       "  c /= stddev[:, None]\n",
                                                       "c:\\Users\\SebastiánIgnacioCata\\AppData\\Local\\Python\\pythoncore-3.14-64\\Lib\\site-packages\\numpy\\lib\\_function_base_impl.py:3066: RuntimeWarning: invalid value encountered in divide\n",
                                                       "  c /= stddev[None, :]\n",
                                                       "C:\\Users\\SebastiánIgnacioCata\\AppData\\Local\\Temp\\ipykernel_1852\\1590182412.py:15: RankWarning: Polyfit may be poorly conditioned\n",
                                                       "  beta, alpha = np.polyfit(x, y, 1)\n",
                                                       "C:\\Users\\SebastiánIgnacioCata\\AppData\\Local\\Temp\\ipykernel_1852\\1590182412.py:15: RankWarning: Polyfit may be poorly conditioned\n",
                                                       "  beta, alpha = np.polyfit(x, y, 1)\n",
                                                       "C:\\Users\\SebastiánIgnacioCata\\AppData\\Local\\Temp\\ipykernel_1852\\1590182412.py:15: RankWarning: Polyfit may be poorly conditioned\n",
                                                       "  beta, alpha = np.polyfit(x, y, 1)\n",
                                                       "C:\\Users\\SebastiánIgnacioCata\\AppData\\Local\\Temp\\ipykernel_1852\\1590182412.py:15: RankWarning: Polyfit may be poorly conditioned\n",
                                                       "  beta, alpha = np.polyfit(x, y, 1)\n",
                                                       "C:\\Users\\SebastiánIgnacioCata\\AppData\\Local\\Temp\\ipykernel_1852\\1590182412.py:15: RankWarning: Polyfit may be poorly conditioned\n",
                                                       "  beta, alpha = np.polyfit(x, y, 1)\n",
                                                       "C:\\Users\\SebastiánIgnacioCata\\AppData\\Local\\Temp\\ipykernel_1852\\1590182412.py:15: RankWarning: Polyfit may be poorly conditioned\n",
                                                       "  beta, alpha = np.polyfit(x, y, 1)\n",
                                                       "C:\\Users\\SebastiánIgnacioCata\\AppData\\Local\\Temp\\ipykernel_1852\\1590182412.py:15: RankWarning: Polyfit may be poorly conditioned\n",
                                                       "  beta, alpha = np.polyfit(x, y, 1)\n",
                                                       "C:\\Users\\SebastiánIgnacioCata\\AppData\\Local\\Temp\\ipykernel_1852\\1590182412.py:15: RankWarning: Polyfit may be poorly conditioned\n",
                                                       "  beta, alpha = np.polyfit(x, y, 1)\n",
                                                       "C:\\Users\\SebastiánIgnacioCata\\AppData\\Local\\Temp\\ipykernel_1852\\1590182412.py:15: RankWarning: Polyfit may be poorly conditioned\n",
                                                       "  beta, alpha = np.polyfit(x, y, 1)\n",
                                                       "C:\\Users\\SebastiánIgnacioCata\\AppData\\Local\\Temp\\ipykernel_1852\\1590182412.py:15: RankWarning: Polyfit may be poorly conditioned\n",
                                                       "  beta, alpha = np.polyfit(x, y, 1)\n",
                                                       "C:\\Users\\SebastiánIgnacioCata\\AppData\\Local\\Temp\\ipykernel_1852\\1590182412.py:19: FutureWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
                                                       "  res = df_valid.groupby(\u0027sku\u0027, as_index=False).apply(fit_group).reset_index(drop=True)\n"
                                                   ]
                                      },
                                      {
                                          "data":  {
                                                       "text/html":  [
                                                                         "\u003cdiv\u003e\n",
                                                                         "\u003cstyle scoped\u003e\n",
                                                                         "    .dataframe tbody tr th:only-of-type {\n",
                                                                         "        vertical-align: middle;\n",
                                                                         "    }\n",
                                                                         "\n",
                                                                         "    .dataframe tbody tr th {\n",
                                                                         "        vertical-align: top;\n",
                                                                         "    }\n",
                                                                         "\n",
                                                                         "    .dataframe thead th {\n",
                                                                         "        text-align: right;\n",
                                                                         "    }\n",
                                                                         "\u003c/style\u003e\n",
                                                                         "\u003ctable border=\"1\" class=\"dataframe\"\u003e\n",
                                                                         "  \u003cthead\u003e\n",
                                                                         "    \u003ctr style=\"text-align: right;\"\u003e\n",
                                                                         "      \u003cth\u003e\u003c/th\u003e\n",
                                                                         "      \u003cth\u003esku\u003c/th\u003e\n",
                                                                         "      \u003cth\u003enombre_producto\u003c/th\u003e\n",
                                                                         "      \u003cth\u003en_puntos\u003c/th\u003e\n",
                                                                         "      \u003cth\u003ebeta\u003c/th\u003e\n",
                                                                         "      \u003cth\u003ealpha\u003c/th\u003e\n",
                                                                         "      \u003cth\u003er2\u003c/th\u003e\n",
                                                                         "    \u003c/tr\u003e\n",
                                                                         "  \u003c/thead\u003e\n",
                                                                         "  \u003ctbody\u003e\n",
                                                                         "    \u003ctr\u003e\n",
                                                                         "      \u003cth\u003e0\u003c/th\u003e\n",
                                                                         "      \u003ctd\u003e40002139\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003eTAMPER MANUAL DE ALUMINIO\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e4.0\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e0.190401\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e0.517639\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e0.010202\u003c/td\u003e\n",
                                                                         "    \u003c/tr\u003e\n",
                                                                         "    \u003ctr\u003e\n",
                                                                         "      \u003cth\u003e1\u003c/th\u003e\n",
                                                                         "      \u003ctd\u003e40002155\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003eMAQUINA CAPSULA LB 2600 LAVAZZA\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e4.0\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e9.084052\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e-93.503664\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e0.966398\u003c/td\u003e\n",
                                                                         "    \u003c/tr\u003e\n",
                                                                         "    \u003ctr\u003e\n",
                                                                         "      \u003cth\u003e2\u003c/th\u003e\n",
                                                                         "      \u003ctd\u003e40002156\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003eMAQUINA CAFE CAPS LB 4724 LAVAZZA\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e1.0\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003eNaN\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003eNaN\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003eNaN\u003c/td\u003e\n",
                                                                         "    \u003c/tr\u003e\n",
                                                                         "    \u003ctr\u003e\n",
                                                                         "      \u003cth\u003e3\u003c/th\u003e\n",
                                                                         "      \u003ctd\u003e40002157\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003eMAQUINA CAFE CAPS LB 2317 LAVAZZA\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e4.0\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e0.354687\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e-1.432320\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e0.316176\u003c/td\u003e\n",
                                                                         "    \u003c/tr\u003e\n",
                                                                         "    \u003ctr\u003e\n",
                                                                         "      \u003cth\u003e4\u003c/th\u003e\n",
                                                                         "      \u003ctd\u003e40002159\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003eMAQUINA CAFE CAPS LB CLASSY MINI LAVAZZA\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e9.0\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e-1.972147\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e23.461383\u003c/td\u003e\n",
                                                                         "      \u003ctd\u003e0.197042\u003c/td\u003e\n",
                                                                         "    \u003c/tr\u003e\n",
                                                                         "  \u003c/tbody\u003e\n",
                                                                         "\u003c/table\u003e\n",
                                                                         "\u003c/div\u003e"
                                                                     ],
                                                       "text/plain":  [
                                                                          "        sku                           nombre_producto  n_puntos      beta  \\\n",
                                                                          "0  40002139                 TAMPER MANUAL DE ALUMINIO       4.0  0.190401   \n",
                                                                          "1  40002155           MAQUINA CAPSULA LB 2600 LAVAZZA       4.0  9.084052   \n",
                                                                          "2  40002156         MAQUINA CAFE CAPS LB 4724 LAVAZZA       1.0       NaN   \n",
                                                                          "3  40002157         MAQUINA CAFE CAPS LB 2317 LAVAZZA       4.0  0.354687   \n",
                                                                          "4  40002159  MAQUINA CAFE CAPS LB CLASSY MINI LAVAZZA       9.0 -1.972147   \n",
                                                                          "\n",
                                                                          "       alpha        r2  \n",
                                                                          "0   0.517639  0.010202  \n",
                                                                          "1 -93.503664  0.966398  \n",
                                                                          "2        NaN       NaN  \n",
                                                                          "3  -1.432320  0.316176  \n",
                                                                          "4  23.461383  0.197042  "
                                                                      ]
                                                   },
                                          "execution_count":  2,
                                          "metadata":  {

                                                       },
                                          "output_type":  "execute_result"
                                      }
                                  ],
                      "source":  [
                                     "# Ajuste log-log por SKU: ln(Q) = alpha + beta ln(P) + e\n",
                                     "import numpy as np, pandas as pd\n",
                                     "required = [\u0027sku\u0027,\u0027ln_precio_promedio\u0027,\u0027ln_kilos\u0027]\n",
                                     "missing = [c for c in required if c not in df.columns]\n",
                                     "if missing:\n",
                                     "    raise KeyError(f\u0027Faltan columnas: {missing}\u0027)\n",
                                     "df_valid = df[required].replace([np.inf,-np.inf], np.nan).dropna()\n",
                                     "\n",
                                     "def fit_group(g):\n",
                                     "    x = g[\u0027ln_precio_promedio\u0027].to_numpy(float)\n",
                                     "    y = g[\u0027ln_kilos\u0027].to_numpy(float)\n",
                                     "    n = x.size\n",
                                     "    if n \u003c 2 or np.var(x) == 0:\n",
                                     "        return pd.Series({\u0027alpha\u0027: np.nan,\u0027beta\u0027: np.nan,\u0027n_puntos\u0027: int(n),\u0027r2\u0027: np.nan})\n",
                                     "    beta, alpha = np.polyfit(x, y, 1)\n",
                                     "    r = np.corrcoef(x, y)[0, 1]\n",
                                     "    return pd.Series({\u0027alpha\u0027: float(alpha), \u0027beta\u0027: float(beta), \u0027n_puntos\u0027: int(n), \u0027r2\u0027: float(r**2)})\n",
                                     "\n",
                                     "res = df_valid.groupby(\u0027sku\u0027, as_index=False).apply(fit_group).reset_index(drop=True)\n",
                                     "if \u0027nombre_producto\u0027 in df.columns:\n",
                                     "    res = res.merge(df[[\u0027sku\u0027,\u0027nombre_producto\u0027]].drop_duplicates(\u0027sku\u0027), on=\u0027sku\u0027, how=\u0027left\u0027)\n",
                                     "cols = [\u0027sku\u0027] + ([\u0027nombre_producto\u0027] if \u0027nombre_producto\u0027 in res.columns else []) + [\u0027n_puntos\u0027,\u0027beta\u0027,\u0027alpha\u0027,\u0027r2\u0027]\n",
                                     "res = res[cols]\n",
                                     "res.to_csv(\u0027elasticidades_loglog_por_sku.csv\u0027, index=False)\n",
                                     "res.head()\n"
                                 ]
                  },
                  {
                      "cell_type":  "code",
                      "execution_count":  3,
                      "id":  "plot_btn_ui",
                      "metadata":  {

                                   },
                      "outputs":  [
                                      {
                                          "data":  {
                                                       "application/vnd.jupyter.widget-view+json":  {
                                                                                                        "model_id":  "eb45d302c705457ca2a1eb2f5eb9f2f9",
                                                                                                        "version_major":  2,
                                                                                                        "version_minor":  0
                                                                                                    },
                                                       "text/plain":  [
                                                                          "VBox(children=(HBox(children=(Combobox(value=\u0027\u0027, description=\u0027SKU:\u0027, layout=Layout(width=\u002770%\u0027), options=(\u0027100…"
                                                                      ]
                                                   },
                                          "metadata":  {

                                                       },
                                          "output_type":  "display_data"
                                      }
                                  ],
                      "source":  [
                                     "# Plot con botón: escribe/busca SKU, plotea ln(P) vs ln(Q) y recta del ajuste\n",
                                     "import pandas as pd, numpy as np\n",
                                     "import matplotlib.pyplot as plt\n",
                                     "import ipywidgets as W\n",
                                     "from IPython.display import display\n",
                                     "\n",
                                     "def _ensure_df_res():\n",
                                     "    global df, res\n",
                                     "    if \u0027df\u0027 not in globals():\n",
                                     "        df = pd.read_csv(\u0027output_price.csv\u0027)\n",
                                     "    if \u0027ln_precio_promedio\u0027 not in df.columns:\n",
                                     "        df[\u0027ln_precio_promedio\u0027] = np.where(df[\u0027precio_promedio\u0027] \u003e 0, np.log(df[\u0027precio_promedio\u0027]), np.nan)\n",
                                     "    if \u0027ln_kilos\u0027 not in df.columns:\n",
                                     "        df[\u0027ln_kilos\u0027] = np.where(df[\u0027kilos\u0027] \u003e 0, np.log(df[\u0027kilos\u0027]), np.nan)\n",
                                     "    if \u0027res\u0027 not in globals():\n",
                                     "        try:\n",
                                     "            res = pd.read_csv(\u0027elasticidades_loglog_por_sku.csv\u0027)\n",
                                     "        except FileNotFoundError:\n",
                                     "            res = pd.DataFrame(columns=[\u0027sku\u0027,\u0027alpha\u0027,\u0027beta\u0027,\u0027r2\u0027,\u0027n_puntos\u0027])\n",
                                     "\n",
                                     "_ensure_df_res()\n",
                                     "\n",
                                     "def _labels_map():\n",
                                     "    skus = sorted(df[\u0027sku\u0027].astype(str).unique().tolist())\n",
                                     "    labels = []\n",
                                     "    for s in skus:\n",
                                     "        if \u0027nombre_producto\u0027 in df.columns:\n",
                                     "            nm = df.loc[df[\u0027sku\u0027].astype(str) == s, \u0027nombre_producto\u0027]\n",
                                     "            lab = f\"{s} - {nm.iloc[0]}\" if not nm.empty else s\n",
                                     "        else:\n",
                                     "            lab = s\n",
                                     "        labels.append(lab)\n",
                                     "    return labels, skus\n",
                                     "\n",
                                     "def _resolve(texto):\n",
                                     "    labels, skus = _labels_map()\n",
                                     "    if not texto:\n",
                                     "        return None\n",
                                     "    t = str(texto).strip()\n",
                                     "    if t in skus:\n",
                                     "        return t\n",
                                     "    if \u0027 - \u0027 in t and t.split(\u0027 - \u0027, 1)[0] in skus:\n",
                                     "        return t.split(\u0027 - \u0027, 1)[0]\n",
                                     "    tt = t.lower()\n",
                                     "    for lab in labels:\n",
                                     "        if tt and tt in lab.lower():\n",
                                     "            return lab.split(\u0027 - \u0027, 1)[0]\n",
                                     "    return None\n",
                                     "\n",
                                     "def _plot(sk):\n",
                                     "    datos = df[df[\u0027sku\u0027].astype(str) == sk][[\u0027ln_precio_promedio\u0027,\u0027ln_kilos\u0027]].replace([np.inf, -np.inf], np.nan).dropna()\n",
                                     "    fila = res[res[\u0027sku\u0027].astype(str) == sk]\n",
                                     "    alpha = float(fila[\u0027alpha\u0027].iloc[0]) if not fila.empty else np.nan\n",
                                     "    beta  = float(fila[\u0027beta\u0027].iloc[0])  if not fila.empty else np.nan\n",
                                     "    r2    = float(fila[\u0027r2\u0027].iloc[0])    if not fila.empty else np.nan\n",
                                     "\n",
                                     "    plt.figure(figsize=(7,5))\n",
                                     "    x = datos[\u0027ln_precio_promedio\u0027].to_numpy(); y = datos[\u0027ln_kilos\u0027].to_numpy()\n",
                                     "    plt.scatter(x, y, alpha=0.75, label=\u0027Datos (ln P vs ln Q)\u0027)\n",
                                     "    if x.size \u003e 0 and not (np.isnan(alpha) or np.isnan(beta)):\n",
                                     "        xx = np.linspace(np.nanmin(x), np.nanmax(x), 100)\n",
                                     "        yy = alpha + beta * xx\n",
                                     "        plt.plot(xx, yy, color=\u0027red\u0027, label=f\u0027Recta: y = {alpha:.2f} + {beta:.2f} x\u0027)\n",
                                     "    plt.xlabel(\u0027ln(P) precio_promedio\u0027); plt.ylabel(\u0027ln(Q) kilos\u0027)\n",
                                     "    if not np.isnan(r2):\n",
                                     "        xmin, xmax = plt.xlim(); ymin, ymax = plt.ylim()\n",
                                     "        plt.text(xmin + 0.02*(xmax-xmin), ymax - 0.08*(ymax-ymin), f\u0027R^2 = {r2:.3f}\u0027, fontsize=11, bbox=dict(facecolor=\u0027white\u0027, alpha=0.7, edgecolor=\u0027none\u0027))\n",
                                     "    plt.grid(True, alpha=0.25); plt.legend(); plt.show()\n",
                                     "\n",
                                     "labels, _ = _labels_map()\n",
                                     "cb = W.Combobox(options=labels, placeholder=\u0027Escribe SKU o nombre...\u0027, description=\u0027SKU:\u0027, ensure_option=False, layout=W.Layout(width=\u002770%\u0027))\n",
                                     "btn = W.Button(description=\u0027Generar\u0027, button_style=\u0027primary\u0027, layout=W.Layout(width=\u002720%\u0027))\n",
                                     "out = W.Output()\n",
                                     "\n",
                                     "def _on_click(_):\n",
                                     "    btn.description = \u0027Generando...\u0027; btn.disabled = True\n",
                                     "    try:\n",
                                     "        with out:\n",
                                     "            out.clear_output()\n",
                                     "            sk = _resolve(cb.value)\n",
                                     "            if sk is None:\n",
                                     "                print(\u0027Selecciona un SKU válido.\u0027)\n",
                                     "            else:\n",
                                     "                _plot(sk)\n",
                                     "    finally:\n",
                                     "        btn.description = \u0027Generar\u0027; btn.disabled = False\n",
                                     "\n",
                                     "btn.on_click(_on_click)\n",
                                     "display(W.VBox([W.HBox([cb, btn]), out]))\n"
                                 ]
                  },
                  {
                      "cell_type":  "code",
                      "execution_count":  4,
                      "id":  "pricing_btn_ui",
                      "metadata":  {

                                   },
                      "outputs":  [
                                      {
                                          "data":  {
                                                       "application/vnd.jupyter.widget-view+json":  {
                                                                                                        "model_id":  "772dabfc60ff44539d0c31c96c47f6ff",
                                                                                                        "version_major":  2,
                                                                                                        "version_minor":  0
                                                                                                    },
                                                       "text/plain":  [
                                                                          "VBox(children=(HBox(children=(Combobox(value=\u0027\u0027, description=\u0027SKU:\u0027, layout=Layout(width=\u002760%\u0027), options=(\u0027100…"
                                                                      ]
                                                   },
                                          "metadata":  {

                                                       },
                                          "output_type":  "display_data"
                                      }
                                  ],
                      "source":  [
                                     "# Precio objetivo con botón: muestra últimos 10 por fecha y estadísticos en parámetros\n",
                                     "import pandas as pd, numpy as np\n",
                                     "import ipywidgets as W\n",
                                     "from IPython.display import display\n",
                                     "\n",
                                     "# Reutiliza funciones auxiliares si existen; si no, define mínimas\n",
                                     "def _labels_map2():\n",
                                     "    skus = sorted(df[\u0027sku\u0027].astype(str).unique().tolist())\n",
                                     "    labels = []\n",
                                     "    for s in skus:\n",
                                     "        if \u0027nombre_producto\u0027 in df.columns:\n",
                                     "            nm = df.loc[df[\u0027sku\u0027].astype(str) == s, \u0027nombre_producto\u0027]\n",
                                     "            lab = f\"{s} - {nm.iloc[0]}\" if not nm.empty else s\n",
                                     "        else:\n",
                                     "            lab = s\n",
                                     "        labels.append(lab)\n",
                                     "    return labels, skus\n",
                                     "\n",
                                     "def _resolve2(texto):\n",
                                     "    labels, skus = _labels_map2()\n",
                                     "    if not texto:\n",
                                     "        return None\n",
                                     "    t = str(texto).strip()\n",
                                     "    if t in skus:\n",
                                     "        return t\n",
                                     "    if \u0027 - \u0027 in t and t.split(\u0027 - \u0027, 1)[0] in skus:\n",
                                     "        return t.split(\u0027 - \u0027, 1)[0]\n",
                                     "    tt = t.lower()\n",
                                     "    for lab in labels:\n",
                                     "        if tt and tt in lab.lower():\n",
                                     "            return lab.split(\u0027 - \u0027, 1)[0]\n",
                                     "    return None\n",
                                     "\n",
                                     "def _stats_for_sku(sk):\n",
                                     "    d = df[df[\u0027sku\u0027].astype(str) == sk]\n",
                                     "    def s(col):\n",
                                     "        if col not in d.columns: return (np.nan, np.nan, np.nan)\n",
                                     "        vals = pd.to_numeric(d[col], errors=\u0027coerce\u0027)\n",
                                     "        m = float(vals.mean()) if not np.isnan(vals.mean()) else np.nan\n",
                                     "        st = float(vals.std(ddof=1)) if not np.isnan(vals.std(ddof=1)) else np.nan\n",
                                     "        cv = float(st/m) if (m not in (0, np.nan) and not np.isnan(m) and not np.isnan(st)) else np.nan\n",
                                     "        return (m, st, cv)\n",
                                     "    pm, ps, pcv = s(\u0027precio_promedio\u0027)\n",
                                     "    qm, qs, qcv = s(\u0027kilos\u0027)\n",
                                     "    return pm, ps, pcv, qm, qs, qcv\n",
                                     "\n",
                                     "labels, skus = _labels_map2()\n",
                                     "cb2 = W.Combobox(options=labels, placeholder=\u0027Escribe SKU o nombre...\u0027, description=\u0027SKU:\u0027, ensure_option=False, layout=W.Layout(width=\u002760%\u0027))\n",
                                     "vol = W.FloatText(value=10.0, description=\u0027Volumen Q:\u0027, layout=W.Layout(width=\u002720%\u0027))\n",
                                     "btn2 = W.Button(description=\u0027Calcular\u0027, button_style=\u0027primary\u0027, layout=W.Layout(width=\u002715%\u0027))\n",
                                     "out_tbl = W.Output(); out_params = W.Output(); out_calc = W.Output()\n",
                                     "\n",
                                     "def _on_click2(_):\n",
                                     "    btn2.description = \u0027Calculando...\u0027; btn2.disabled = True\n",
                                     "    try:\n",
                                     "        sk = _resolve2(cb2.value)\n",
                                     "        # Historial: últimos 10 por fecha\n",
                                     "        with out_tbl:\n",
                                     "            out_tbl.clear_output()\n",
                                     "            if not sk:\n",
                                     "                print(\u0027Selecciona un SKU válido.\u0027)\n",
                                     "            else:\n",
                                     "                d = df[df[\u0027sku\u0027].astype(str) == sk][[\u0027semana\u0027,\u0027precio_promedio\u0027,\u0027kilos\u0027]].copy()\n",
                                     "                if \u0027semana\u0027 in d.columns:\n",
                                     "                    with pd.option_context(\u0027mode.chained_assignment\u0027, None):\n",
                                     "                        try:\n",
                                     "                            d[\u0027semana\u0027] = pd.to_datetime(d[\u0027semana\u0027])\n",
                                     "                        except Exception:\n",
                                     "                            pass\n",
                                     "                    d = d.sort_values(\u0027semana\u0027)\n",
                                     "                display(d.tail(10))\n",
                                     "        # Parámetros + estadísticos\n",
                                     "        with out_params:\n",
                                     "            out_params.clear_output()\n",
                                     "            fila = res[res[\u0027sku\u0027].astype(str) == sk]\n",
                                     "            if fila.empty:\n",
                                     "                display(pd.DataFrame([{\u0027sku\u0027: sk, \u0027n_puntos\u0027: 0, \u0027alpha\u0027: np.nan, \u0027beta\u0027: np.nan, \u0027r2\u0027: np.nan}]))\n",
                                     "            else:\n",
                                     "                pm, ps, pcv, qm, qs, qcv = _stats_for_sku(sk)\n",
                                     "                base = fila[[\u0027sku\u0027,\u0027n_puntos\u0027,\u0027alpha\u0027,\u0027beta\u0027,\u0027r2\u0027]].copy().reset_index(drop=True)\n",
                                     "                base[\u0027precio_mean\u0027] = pm; base[\u0027precio_std\u0027] = ps; base[\u0027precio_cv\u0027] = pcv\n",
                                     "                base[\u0027kilos_mean\u0027] = qm; base[\u0027kilos_std\u0027] = qs; base[\u0027kilos_cv\u0027] = qcv\n",
                                     "                display(base)\n",
                                     "        # Precio sugerido\n",
                                     "        with out_calc:\n",
                                     "            out_calc.clear_output()\n",
                                     "            fila = res[res[\u0027sku\u0027].astype(str) == sk]\n",
                                     "            if fila.empty:\n",
                                     "                print(\u0027No hay parámetros para ese SKU.\u0027)\n",
                                     "            else:\n",
                                     "                beta = float(fila[\u0027beta\u0027].iloc[0]); alpha = float(fila[\u0027alpha\u0027].iloc[0])\n",
                                     "                if np.isnan(beta) or beta == 0 or vol.value is None or vol.value \u003c= 0:\n",
                                     "                    print(\u0027No es posible calcular precio (beta nula o volumen inválido).\u0027)\n",
                                     "                else:\n",
                                     "                    lnP = (np.log(vol.value) - alpha) / beta\n",
                                     "                    precio = float(np.exp(lnP))\n",
                                     "                    display(pd.DataFrame([{\u0027sku\u0027: sk, \u0027Q_objetivo\u0027: vol.value, \u0027precio_sugerido\u0027: precio}]))\n",
                                     "    finally:\n",
                                     "        btn2.description = \u0027Calcular\u0027; btn2.disabled = False\n",
                                     "\n",
                                     "btn2.on_click(_on_click2)\n",
                                     "display(W.VBox([\n",
                                     "    W.HBox([cb2, vol, btn2]),\n",
                                     "    W.HTML(\u0027\u003cb\u003eHistorial (últimos 10 por fecha)\u003c/b\u003e\u0027), out_tbl,\n",
                                     "    W.HTML(\u0027\u003cb\u003eParámetros + estadísticos\u003c/b\u003e\u0027), out_params,\n",
                                     "    W.HTML(\u0027\u003cb\u003ePrecio para Q objetivo\u003c/b\u003e\u0027), out_calc\n",
                                     "]))\n"
                                 ]
                  },
                  {
                      "cell_type":  "code",
                      "execution_count":  null,
                      "id":  "cb5f8acf",
                      "metadata":  {

                                   },
                      "outputs":  [

                                  ],
                      "source":  [

                                 ]
                  }
              ],
    "metadata":  {
                     "kernelspec":  {
                                        "display_name":  "Python 3",
                                        "language":  "python",
                                        "name":  "python3"
                                    },
                     "language_info":  {
                                           "codemirror_mode":  {
                                                                   "name":  "ipython",
                                                                   "version":  3
                                                               },
                                           "file_extension":  ".py",
                                           "mimetype":  "text/x-python",
                                           "name":  "python",
                                           "nbconvert_exporter":  "python",
                                           "pygments_lexer":  "ipython3",
                                           "version":  "3.14.0"
                                       }
                 },
    "nbformat":  4,
    "nbformat_minor":  5
}

